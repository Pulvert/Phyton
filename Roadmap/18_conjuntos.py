{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMl2KoBUGlKlFNH+ZNhPxeM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c3vNjonAE_nm","executionInfo":{"status":"ok","timestamp":1720605547622,"user_tz":-120,"elapsed":314,"user":{"displayName":"Diego","userId":"07408759357351876848"}},"outputId":"b57cb9b3-67cd-4632-9868-81c8eb654194"},"outputs":[{"output_type":"stream","name":"stdout","text":["['Diego']\n","['Jose', 'Diego']\n","['Jose', 'Diego', 'Juan', 'Mario']\n","['Jose', 'Sandra', 'María', 'Diego', 'Juan', 'Mario']\n","['Sandra', 'María', 'Diego', 'Juan', 'Mario']\n","['Sandra', 'Eva', 'Diego', 'Juan', 'Mario']\n","['Sandra', 'Eva', 'Diego', 'Juan', 'Mario', 'John', 'Mark']\n","{3, 4}\n","{1, 2}\n","{5, 6}\n","{1, 2, 5, 6}\n","Estructura inicial: [1, 2, 3, 4, 5]\n","Añadiendo elemento al final: [1, 2, 3, 4, 5, 6]\n","Añadiendo elemento al principio: [0, 1, 2, 3, 4, 5, 6]\n","Añadiendo elementos al final: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n","Añadiendo elementos en una posición: [0, 1, 2, -1, -2, -3, 3, 4, 5, 6, 7, 8, 9]\n","Eliminando un elemento concreto: [0, 1, 2, -2, -3, 3, 4, 5, 6, 7, 8, 9]\n","Actualizando un elemento concreto: [0, 1, 2, -2, -1, 3, 4, 5, 6, 7, 8, 9]\n","Comprobar si un elemento existe: True\n","Eliminar el contenido: None\n","Unión: {1, 2, 3, 4, 5, 6, 7}\n","Intersección: {1, 2, 3, 4}\n","Diferencia: {5}\n","Diferencia: {6, 7}\n","Diferencia simétrica: {5, 6, 7}\n"]}],"source":["\"\"\"\n"," * Utilizando tu lenguaje crea un conjunto de datos y realiza las siguientes\n"," * operaciones (debes utilizar una estructura que las soporte):\n"," * - Añade un elemento al final.\n"," * - Añade un elemento al principio.\n"," * - Añade varios elementos en bloque al final.\n"," * - Añade varios elementos en bloque en una posición concreta.\n"," * - Elimina un elemento en una posición concreta.\n"," * - Actualiza el valor de un elemento en una posición concreta.\n"," * - Comprueba si un elemento está en un conjunto.\n"," * - Elimina todo el contenido del conjunto.\n"," *\n"," * DIFICULTAD EXTRA (opcional):\n"," * Muestra ejemplos de las siguientes operaciones con conjuntos:\n"," * - Unión.\n"," * - Intersección.\n"," * - Diferencia.\n"," * - Diferencia simétrica.\n","\"\"\"\n","\n","my_list = []\n","\n","# Añade un elemento al final\n","my_list.append(\"Diego\")\n","print(my_list)\n","\n","# Añade un elemento al principio\n","my_list.insert(0,\"Jose\")\n","print(my_list)\n","\n","# Añade varios elementos en bloque al final\n","elements = \"Juan\",\"Mario\"\n","my_list.extend(elements)\n","print(my_list)\n","\n","# Añade varios elementos en bloque en una posición concreta\n","elements2 = \"Sandra\" , \"María\"\n","my_list[1:1] = elements2\n","print(my_list)\n","\n","# Elimina un elemento en una posición concreta.\n","my_list.pop(0)\n","print(my_list)\n","\n","# Actualiza el valor de un elemento en una posición concreta\n","my_list[1] = \"Eva\"\n","print(my_list)\n","\n","# Comprueba si un elemento está en un conjunto\n","\"Eva\" in my_list\n","\n","# Elimina todo el contenido del conjunto\n","\"\"\"\n","del my_list\n","\"\"\"\n","\n","# Extra\n","# Unión\n","my_list2 = [\"John\", \"Mark\"]\n","my_list3 = my_list + my_list2\n","print(my_list3)\n","\n","# Intersección\n","a = {1, 2, 3, 4}\n","b = {3, 4, 5, 6}\n","\n","print(a.intersection(b))\n","\n","# Diferencia\n","print(a.difference(b))\n","print(b.difference(a))\n","\n","# Diferencia simétrica\n","print(a.symmetric_difference(b))\n","\n","\n","# Solución\n","\"\"\"\n","Ejercicio\n","\"\"\"\n","\n","data = [1, 2, 3, 4, 5]\n","print(f\"Estructura inicial: {data}\")\n","\n","data.append(6)\n","print(f\"Añadiendo elemento al final: {data}\")\n","\n","data.insert(0, 0)\n","print(f\"Añadiendo elemento al principio: {data}\")\n","\n","data.extend([7, 8, 9])\n","print(f\"Añadiendo elementos al final: {data}\")\n","\n","data[3:3] = [-1, -2, -3]\n","print(f\"Añadiendo elementos en una posición: {data}\")\n","\n","del data[3]\n","print(f\"Eliminando un elemento concreto: {data}\")\n","\n","data[4] = -1\n","print(f\"Actualizando un elemento concreto: {data}\")\n","\n","print(f\"Comprobar si un elemento existe: {-1 in data}\")\n","\n","print(f\"Eliminar el contenido: {data.clear()}\")\n","\n","\"\"\"\n","Extra\n","\"\"\"\n","\n","set_1 = {1, 2, 3, 4, 5}\n","set_2 = {1, 2, 3, 4, 6, 7}\n","\n","print(f\"Unión: {set_1.union(set_2)}\")\n","\n","print(f\"Intersección: {set_1.intersection(set_2)}\")\n","\n","print(f\"Diferencia: {set_1.difference(set_2)}\")\n","print(f\"Diferencia: {set_2.difference(set_1)}\")\n","\n","print(f\"Diferencia simétrica: {set_1.symmetric_difference(set_2)}\")"]},{"cell_type":"code","source":[],"metadata":{"id":"M2Re0UffNVXe"},"execution_count":null,"outputs":[]}]}