{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM6kJ5XhvmX7YudsUwO4qw/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":61,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XOrvxFqr4Mtg","executionInfo":{"status":"ok","timestamp":1721137958472,"user_tz":-120,"elapsed":784,"user":{"displayName":"Diego","userId":"07408759357351876848"}},"outputId":"1481de2d-ac72-4924-fe7c-26b30262976e"},"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 4, 9, 16, 25]\n","[2, 4]\n","15\n","30\n","50\n","Pedro: 9.27\n","Juan: 5.37\n","Mario: 4.40\n","Isabel: 5.93\n","Marta: 7.23\n","Pedro: 9.27\n","Isabel: 14-09-76\n","Juan: 01-08-87\n","Marta: 21-01-88\n","Pedro: 25-02-91\n","Mario: 28-05-96\n","8\n","10\n","6\n","[2, 6, 8, 4, 10]\n","[4, 2]\n","[1, 2, 3, 4, 5]\n","[5, 4, 3, 2, 1]\n","[5, 4, 3, 2, 1]\n","15\n","[{'name': 'Brais', 'average': 6.625}, {'name': 'moure', 'average': 4.125}, {'name': 'mouredev', 'average': 4.375}, {'name': 'supermouredev', 'average': 9.65}]\n","['supermouredev']\n","[{'name': 'mouredev', 'birthdate': '15-12-2000', 'grades': [4, 6.5, 5, 2]}, {'name': 'moure', 'birthdate': '04-08-1995', 'grades': [1, 9.5, 2, 4]}, {'name': 'Brais', 'birthdate': '29-04-1987', 'grades': [5, 8.5, 3, 10]}, {'name': 'supermouredev', 'birthdate': '25-01-1980', 'grades': [10, 9, 9.7, 9.9]}]\n","10\n"]}],"source":["\"\"\"\n"," * Explora el concepto de funciones de orden superior en tu lenguaje\n"," * creando ejemplos simples (a tu elección) que muestren su funcionamiento.\n"," *\n"," * DIFICULTAD EXTRA (opcional):\n"," * Dada una lista de estudiantes (con sus nombres, fecha de nacimiento y\n"," * lista de calificaciones), utiliza funciones de orden superior para\n"," * realizar las siguientes operaciones de procesamiento y análisis:\n"," * - Promedio calificaciones: Obtiene una lista de estudiantes por nombre\n"," *   y promedio de sus calificaciones.\n"," * - Mejores estudiantes: Obtiene una lista con el nombre de los estudiantes\n"," *   que tienen calificaciones con un 9 o más de promedio.\n"," * - Nacimiento: Obtiene una lista de estudiantes ordenada desde el más joven.\n"," * - Mayor calificación: Obtiene la calificación más alta de entre todas las\n"," *   de los alumnos.\n"," * - Una calificación debe estar comprendida entre 0 y 10 (admite decimales).\n","\"\"\"\n","\n","# Aplica una función a todos los elementos de una lista (u otro iterable) y devuelve un nuevo iterable con los resultados\n","\n","def square(x):\n","    return x * x\n","\n","numbers = [1, 2, 3, 4, 5]\n","squared_numbers = map(square, numbers)\n","print(list(squared_numbers))  # Output: [1, 4, 9, 16, 25]\n","\n","# Filtra los elementos de una lista (u otro iterable) aplicando una función que devuelve True o False.\n","\n","def is_even(x):\n","    return x % 2 == 0\n","\n","numbers = [1, 2, 3, 4, 5]\n","even_numbers = filter(is_even, numbers)\n","print(list(even_numbers))  # Output: [2, 4]\n","\n","\n","# Aplica una función de manera acumulativa a los elementos de una lista (u otro iterable), reduciéndolos a un único valor\n","from functools import reduce\n","\n","def add(x, y):\n","    return x + y\n","\n","numbers = [1, 2, 3, 4, 5]\n","total = reduce(add, numbers)\n","print(total)  # Output: 15\n","\n","# Función que devuelve otra función\n","\n","def make_multiplier(n):\n","    def multiplier(x):\n","        return x * n\n","    return multiplier\n","\n","times3 = make_multiplier(3)\n","times5 = make_multiplier(5)\n","\n","print(times3(10))  # Output: 30\n","print(times5(10))  # Output: 50\n","\n","# Extra\n","\n","students_list = [[\"Pedro\", \"25-02-91\", [9.2, 9.8, 8.8]],\n","[\"Juan\", \"01-08-87\", [7.1, 5.8, 3.2]],\n","[\"Mario\", \"28-05-96\", [2.2, 4.5, 6.5]],\n","[\"Isabel\", \"14-09-76\", [5.8, 7.3, 4.7]],\n","[\"Marta\", \"21-01-88\", [4.5, 8, 9.2]]]\n","\n","\n","# Promedio calificaciones\n","\n","# Se calcula la media (suma de total / nº de notas)\n","calculate_average = lambda student: sum(student[2]) / len(student[2])\n","\n","# Utiliza map para aplicar calculate_average a cada elemento de students_list, generando una lista de medias de notas\n","average_scores = list(map(calculate_average, students_list))\n","\n","# zip toma dos o más iterables (como listas, tuplas, etc.) y las agrupa en tuplas.\n","# Cada tupla contiene elementos que están en las mismas posiciones en los iterables originales\n","for student, average in zip(students_list, average_scores):\n","    print(f\"{student[0]}: {average:.2f}\")\n","\n","# Mejores estudiantes\n","\n","def is_best(x):\n","    return x > 9\n","\n","# Devuelve el filtro (mayor de 9)\n","the_best = list(filter(is_best, average_scores))\n","\n","for student, average in zip(students_list, the_best):\n","    print(f\"{student[0]}: {average:.2f}\")\n","\n","\n","# Nacimiento\n","\n","from datetime import datetime\n","\n","# Función auxiliar para convertir la fecha a un objeto datetime\n","def convertir_fecha(fecha_str):\n","    return datetime.strptime(fecha_str, \"%d-%m-%y\")\n","\n","# Ordenar la lista de estudiantes por fecha de nacimiento\n","students_list_ordenada = sorted(students_list, key=lambda x: convertir_fecha(x[1]))\n","\n","# Imprimir la lista ordenada\n","for student, date in zip(students_list_ordenada, students_list_ordenada):\n","    print(f\"{student[0]}: {date[1]}\")\n","\n","\n","# Mayor calificación\n","\n","\n","# Solución\n","\n","from functools import reduce\n","from datetime import datetime\n","\n","\"\"\"\n","Ejercicio\n","\"\"\"\n","\n","# Función como argumento\n","\n","\n","def apply_func(func, x):\n","    return func(x)\n","\n","\n","print(apply_func(len, \"MoureDev\"))\n","\n","# Retorno de función\n","\n","\n","def apply_multiplier(n):\n","    def multiplier(x):\n","        return x * n\n","    return multiplier\n","\n","\n","multiplier = apply_multiplier(2)\n","print(multiplier(5))\n","print(apply_multiplier(3)(2))\n","\n","#  Sistema\n","\n","numbers = [1, 3, 4, 2, 5]\n","\n","# map()\n","\n","\n","def apply_double(n):\n","    return n * 2\n","\n","\n","print(list(map(apply_double, numbers)))\n","\n","# filter()\n","\n","\n","def is_even(n):\n","    return n % 2 == 0\n","\n","\n","print(list(filter(is_even, numbers)))\n","\n","# sorted()\n","\n","print(sorted(numbers))\n","print(sorted(numbers, reverse=True))\n","print(sorted(numbers, key=lambda x: -x))\n","\n","# reduce()\n","\n","\n","def sum_values(x, y):\n","    return x + y\n","\n","\n","print(reduce(sum_values, numbers))\n","\n","\"\"\"\n","Extra\n","\"\"\"\n","\n","students = [\n","    {\"name\": \"Brais\", \"birthdate\": \"29-04-1987\", \"grades\": [5, 8.5, 3, 10]},\n","    {\"name\": \"moure\", \"birthdate\": \"04-08-1995\", \"grades\": [1, 9.5, 2, 4]},\n","    {\"name\": \"mouredev\", \"birthdate\": \"15-12-2000\", \"grades\": [4, 6.5, 5, 2]},\n","    {\"name\": \"supermouredev\", \"birthdate\": \"25-01-1980\",\n","        \"grades\": [10, 9, 9.7, 9.9]}\n","]\n","\n","\n","def average(grades):\n","    return sum(grades) / len(grades)\n","\n","# Promedio\n","\n","\n","print(\n","    list(map(lambda student: {\n","        \"name\": student[\"name\"],\n","        \"average\": average(student[\"grades\"])}, students)\n","    )\n",")\n","\n","# Mejores\n","\n","print(\n","    list(\n","        map(lambda student:\n","            student[\"name\"],\n","            filter(lambda student: average(student[\"grades\"]) >= 9, students)\n","            )\n","    )\n",")\n","\n","# Fecha de nacimiento ordenada\n","\n","print(sorted(students, key=lambda student: datetime.strptime(\n","    student[\"birthdate\"], \"%d-%m-%Y\"), reverse=True))\n","\n","# Califiación más alta\n","\n","print(max(map(lambda student: max(student[\"grades\"]), students)))\n"]}]}